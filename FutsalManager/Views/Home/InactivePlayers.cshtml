@{
    ViewData["Title"] = "Home Page";
}

<style>
    .hidden{display:none;}
</style>

@{
    var teams = ViewData["teams"] as List<Team>;
    var players = ViewData["players"] as List<Player>;
    var inactiveplayers = players.Where(p => !p.IsActive).ToList();
}


<form asp-action="SaveInactivePlayers" method="post">
    <div class="text-center mt-5 mb-5">
        <input id="savebutton" type="submit" class="btn btn-primary btn-lg" value="Save">
    </div>


    <div class="px-4 text-center">
        <div class="row mt-3 mb-3">
            <div class="col-sm-12 col-md-12 col-lg-6">

                <!-- Inactive players section -->
                <strong>Found inactive players: @inactiveplayers.Count</strong>
                <h4 class="mt-3 mb-3">Inactive players list</h4>
                <span id="inactiveplayerstoggler" class="d-flex align-items-center justify-content-center">
                    <div class="btn btn-primary">
                        Show inactive players
                        <i class="bi bi-arrow-up" style="font-size: 1.5rem"></i>
                        <i class="hidden bi bi-arrow-down" style="font-size: 1.5rem"></i>
                    </div>

                </span>
                <div id="inactiveplayerscontainer" class="row mt-3 mb-1">
                    @for (int i = 0; i < inactiveplayers.Count; i++)
                    {
                        <div id="player-@inactiveplayers[i].Id" data-playerid="@inactiveplayers[i].Id" class="col d-flex justify-content-center player-card-identifier" style="cursor: move;" draggable="true" ondragstart="drag(event)">
                            @await Html.PartialAsync("Partials/_PlayerCardMinifiedPartial",
                                inactiveplayers[i],
                                new ViewDataDictionary(ViewData)
                                {
                                    { "viewmodel", "advertising" },
                                })
                        </div>
                    }
                </div>
                <!-- Inactive players section END -->
            </div>
            <div class="col-sm-12 col-md-12 col-lg-6">
            <strong>Found avaliable teams: @teams.Count</strong>
                <h4 class="mt-3 mb-3">Avaliable teams list</h4>

                <div class="row">
                    @foreach (var team in teams)
                    {
                        <div id="team-container" class="col-12 mt-3 mb-2">
                            <div class="hidden" id="team-id">@team.Id</div>
                            <div class="row d-flex justify-content-center" style="height:20px;" id="team-capacity">
                                @{
                                    var activePlayers = team.Players.Where(p => p.IsActive).ToList().Count();
                                    var inactiveplayers = team.Players.Where(p => !p.IsActive).ToList().Count();
                                    var freespaces = 5 - (activePlayers + inactiveplayers);
                                }

                                @for (int j = 0; j < activePlayers; j++)
                                {
                                    <div class="col-2 m-1 rounded capacity-status" style="background-color:red"></div>
                                }
                                @for (int j = 0; j < inactiveplayers; j++)
                                {
                                    <div class="col-2 m-1 rounded capacity-status" style="background-color:green"></div>
                                }
                                @for (int j = 0; j < freespaces; j++)
                                {
                                    <div class="col-2 m-1 rounded capacity-status" style="background-color:green"></div>
                                }

                            </div>
                            <span class="team-cell d-flex align-items-center justify-content-around border rounded p-2" ondrop="drop(event)" ondragover="allowDrop(event)">
                                @{
                                    var logoPathPart = string.IsNullOrEmpty(team.LogoPath) ? "default.png" : team.LogoPath;
                                }
                                <img src="@("~/uploads/teams/logos/" + logoPathPart)" asp-append-version="true" class="card-img-top" alt="team's logo" style="max-width:80px">
                                <h4>@team.Name</h4>
                            </span>
                        </div>
                    }
                </div>

                <hr class="mx-auto w-75" />
                    
                <div class="mt-4 mb-4" id="helper-container">
                    <div class="d-flex align-items-center justify-content-center">
                        <span class="m-2 rounded capacity-status" style="width:50px; height:15px;background-color:green"></span>
                        <strong class="m-2">Avaliable spot</strong>
                    </div>
                    <div class="d-flex align-items-center justify-content-center">
                        <span class="m-2 rounded capacity-status" style="width:50px; height:15px;background-color:orange"></span>
                        <strong class="m-2">Currently changed spot</strong>
                    </div>
                    <div class="d-flex align-items-center justify-content-center">
                        <span class="m-2 rounded capacity-status" style="width:50px; height:15px;background-color:red"></span>
                        <strong class="m-2">Busy spot</strong>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="changes-container">

    </div>
</form>

@section Scripts{
    <script>
    let changes = [];
    
    function allowDrop(ev) {
      ev.preventDefault();
    }
    
    function drag(ev) {
      ev.dataTransfer.setData("text", ev.target.id);
    }
    
    function drop(ev) {
      ev.preventDefault(); 
      let target = ev.target;
      let data = ev.dataTransfer.getData("text");  
      let choosenPlayer = document.getElementById(data);
      
      let playerId = choosenPlayer.dataset.playerid;
      let teamId = undefined;
      
      if (target.classList.contains("team-cell")){
        let parent = target.parentNode;
        teamId = $(parent).find("#team-id").html();
      } 
      else{
          let parent = target.parentNode.parentNode;
          teamId = $(parent).find("#team-id").html();
      }
      //TodO: tüntesd el az inaktív játékosok közül
      let card = $(choosenPlayer).find(".player-card");
      card.addClass("hidden");
      
      //Todo változtasd a css-est a capacity-nek
      let parent = target.parentNode;
      let cells = $(parent).find(".capacity-status");
      for (let cell of cells){
        if (cell.style.backgroundColor === "green"){
            cell.style.backgroundColor = "orange"
            break;
            }
      }
      
      const input = document.createElement("input");
      input.setAttribute("type","text");
      input.dataset.playerid = playerId;
      input.dataset.teamid = teamId;
      input.classList.add("hidden");
      changes.push(input);   
    }
    
    document.getElementById("savebutton").addEventListener('click',(e)=>{
              let changesContainer = document.getElementById("changes-container");
              let players = [];
              let teams = [];
              for (let input of changes){
                let pid = input.dataset.playerid;
                let tid = input.dataset.teamid;
                players.push(pid);
                 teams.push(tid);
             }   
          for (let i = 0;i<players.length;i++){
              // Player input
              const pinput = document.createElement("input");
              pinput.setAttribute("type","text");
              pinput.classList.add("hidden");
              pinput.setAttribute("name","Players["+i+"]");
              pinput.setAttribute("value",players[i]);
              
              // Team input
              const tinput = document.createElement("input");
              tinput.setAttribute("type","text");
              tinput.classList.add("hidden");
              tinput.setAttribute("name","Teams["+i+"]");
              tinput.setAttribute("value",teams[i]);
              
              // Appending
              changesContainer.appendChild(pinput);
              changesContainer.appendChild(tinput);
          }
        });
</script>
}